// Generated by CoffeeScript 2.5.1
(function() {
  var DEFAULT_COLLECTION, DEFAULT_POOL_SIZE, MongoClient, _, _buildOptions, urlBuilder, validateConnSettings;

  ({MongoClient} = require('mongodb'));

  urlBuilder = require('./url-builder');

  _ = require('lodash');

  DEFAULT_POOL_SIZE = 5;

  DEFAULT_COLLECTION = '_migrations';

  // This is a utility backward-compat method,
  // it shouldn't be used directly
  exports._buildOptions = _buildOptions = function(config) {
    var options, poolSize;
    options = config.options || {};
    ({poolSize} = config);
    if (poolSize != null) {
      console.warn(`The \`poolSize\` config param is deprecated.
Use \`options: { poolSize: poolSize }\` instead.`);
      if (_.get(options, 'server.poolSize') || _.get(options, 'poolSize')) {
        console.warn(`The \`poolSize\` is overriding the \`options: { poolSize: poolSize }\` value.`);
      }
      _.set(options, 'poolSize', poolSize);
    }
    if (!_.get(options, 'poolSize') && !_.get(options, 'server.poolSize')) {
      _.set(options, 'poolSize', DEFAULT_POOL_SIZE);
    }
    return options;
  };

  validateConnSettings = function(config) {
    var replicaset;
    if (config.url) {
      return;
    }
    ({replicaset} = config);
    if (!replicaset) {
      if (!config.host) {
        throw new Error('`host` is required when `replicaset` is not set');
      }
    } else {
      if (!(_.isObject(replicaset) && !_.isArray(replicaset))) {
        throw new Error('`replicaset` is not an object');
      }
      if (!replicaset.name) {
        throw new Error('`replicaset.name` is not set');
      }
      if (!_.isArray(replicaset.members)) {
        throw new Error('`replicaset.members` is not set or is not an array');
      }
      replicaset.members.forEach(function(m) {
        if (!(m != null ? m.host : void 0)) {
          throw new Error('each of `replicaset.members` must have `host` set');
        }
      });
    }
    if (!config.db) {
      throw new Error('`db` is not set');
    }
    if (config.password && !config.user) {
      throw new Error('`password` provided but `user` is not');
    }
    if (config.authDatabase && !config.user) {
      throw new Error('`authDatabase` provided but `user` is not');
    }
  };

  exports.normalizeConfig = function(config) {
    if (!(_.isObject(config) && !_.isArray(config))) {
      throw new Error('`config` is not provided or is not an object');
    }
    _.defaults(config, {
      collection: DEFAULT_COLLECTION
    });
    validateConnSettings(config);
    return config;
  };

  exports.connect = function(config, cb) {
    var options, url;
    options = _buildOptions(config);
    url = urlBuilder.buildMongoConnString(config);
    return MongoClient.connect(url, options, cb);
  };

  exports.repeatString = function(str, n) {
    return Array(n + 1).join(str);
  };

}).call(this);
